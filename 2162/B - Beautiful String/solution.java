import java.io.*;import java.util.*;Â public class Main {    static boolean okMono(char[] c, int mask) {        char prev = 0;        boolean has = false;        for (int i = 0; i < c.length; i++) {            if (((mask >> i) & 1) == 1) {                if (!has) { prev = c[i]; has = true; }                else if (prev > c[i]) return false;                else prev = c[i];            }        }        return true;    }    static boolean palAfterRemoval(char[] c, int mask) {        int m = c.length;        int l = 0, r = m - 1;        while (l < r) {            while (l < m && ((mask >> l) & 1) == 1) l++;            while (r >= 0 && ((mask >> r) & 1) == 1) r--;            if (l >= r) break;            if (c[l] != c[r]) return false;            l++; r--;        }        return true;    }    public static void main(String[] args) throws Exception {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringBuilder out = new StringBuilder();        int t = Integer.parseInt(br.readLine().trim());        while (t-- > 0) {            int n = Integer.parseInt(br.readLine().trim());            char[] c = br.readLine().trim().toCharArray();            int ans = -1;            for (int mask = 0; mask < (1 << n); mask++) {                if (!okMono(c, mask)) continue;                if (palAfterRemoval(c, mask)) { ans = mask; break; }            }            if (ans < 0) {                out.append("-1\n");            } else {                int k = Integer.bitCount(ans);                out.append(k).append('\n');                if (k > 0) {                    int cnt = 0;                    for (int i = 0; i < n; i++) {                        if (((ans >> i) & 1) == 1) {                            if (cnt++ > 0) out.append(' ');                            out.append(i + 1);                        }                    }                    out.append('\n');                }            }        }        System.out.print(out.toString());    }}