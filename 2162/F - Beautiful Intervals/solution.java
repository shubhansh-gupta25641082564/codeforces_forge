import java.io.*;import java.util.*; public class Main {    static final class F {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;        F(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        int nextInt() throws IOException {            int c, s = 1, x = 0;            do { c = read(); } while (c <= 32);            if (c == '-') { s = -1; c = read(); }            while (c > 32) { x = x * 10 + (c - '0'); c = read(); }            return x * s;        }    }     public static void main(String[] args) throws Exception {        F f = new F(System.in);        StringBuilder out = new StringBuilder();        int t = f.nextInt();        while (t-- > 0) {            int n = f.nextInt();            int m = f.nextInt();            int[] Ls = new int[m];            int[] Rs = new int[m];            int La = 1, Ra = n;            for (int i = 0; i < m; i++) {                int l = f.nextInt();                int r = f.nextInt();                Ls[i] = l; Rs[i] = r;                if (l > La) La = l;                if (r < Ra) Ra = r;            }            int[] diff = new int[n + 3];            for (int i = 0; i < m; i++) {                diff[Ls[i]]++;                diff[Rs[i] + 1]--;            }            int[] cov = new int[n + 1];            int run = 0;            for (int i = 1; i <= n; i++) {                run += diff[i];                cov[i] = run;            }            int[] pos = new int[n + 1];            Arrays.fill(pos, -1);            boolean[] usedVal = new boolean[n];            boolean[] usedPos = new boolean[n + 1];            if (La <= Ra) {                int p0 = La;                pos[p0] = 0;                usedPos[p0] = true;                usedVal[0] = true;                int v = 1;                for (int i = 1; i <= n; i++) if (!usedPos[i]) pos[i] = v++;            } else {                int free = -1;                for (int i = 1; i <= n; i++) if (cov[i] == 0) { free = i; break; }                if (free != -1) {                    int p0 = free;                    pos[p0] = 0;                    usedPos[p0] = true;                    usedVal[0] = true;                    int v = 1;                    for (int i = 1; i <= n; i++) if (!usedPos[i]) pos[i] = v++;                } else {                    int[] L = new int[n + 1];                    int[] R = new int[n + 1];                    for (int i = 1; i <= n; i++) {                        L[i] = 1;                        R[i] = n;                    }                    for (int i = 0; i < m; i++) {                        int l = Ls[i], r = Rs[i];                        for (int x = l; x <= r; x++) {                            if (L[x] < l) L[x] = l;                            if (R[x] > r) R[x] = r;                        }                    }                    int pickI = -1, pickJ = -1;                    for (int i = 1; i <= n; i++) {                        if (cov[i] > 0) {                            if (R[i] - L[i] + 1 >= 2) {                                pickI = i;                                pickJ = (i != L[i] ? L[i] : R[i]);                                break;                            }                        }                    }                    if (pickI != -1) {                        pos[pickI] = 0;                        pos[pickJ] = 1;                        usedPos[pickI] = true;                        usedPos[pickJ] = true;                        usedVal[0] = true;                        usedVal[1] = true;                        int v = 2;                        for (int i = 1; i <= n; i++) if (!usedPos[i]) pos[i] = v++;                    } else {                        int a = 1, b = 3, c = 2;                        pos[a] = 0;                        pos[b] = 1;                        pos[c] = 2;                        usedPos[a] = usedPos[b] = usedPos[c] = true;                        usedVal[0] = usedVal[1] = usedVal[2] = true;                        int v = 3;                        for (int i = 1; i <= n; i++) if (!usedPos[i]) pos[i] = v++;                    }                }            }            for (int i = 1; i <= n; i++) {                if (i > 1) out.append(' ');                out.append(pos[i]);            }            out.append('\n');        }        System.out.print(out.toString());    }}