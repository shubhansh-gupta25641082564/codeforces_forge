import java.io.*;import java.util.*; public class Main {    static class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;        FastScanner(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        long nextLong() throws IOException {            int c;            while ((c = read()) <= ' ') if (c == -1) return Long.MIN_VALUE;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            long val = 0;            while (c > ' ') {                val = val * 10 + (c - '0');                c = read();            }            return val * sign;        }        int nextInt() throws IOException { return (int) nextLong(); }    }     public static void main(String[] args) throws Exception {        FastScanner fs = new FastScanner(System.in);        StringBuilder out = new StringBuilder();        long tL = fs.nextLong();        if (tL == Long.MIN_VALUE) return;        int t = (int) tL;        while (t-- > 0) {            int n = fs.nextInt();            long k = fs.nextLong();            long[] S = new long[n];            long[] T = new long[n];            for (int i = 0; i < n; ++i) S[i] = fs.nextLong();            for (int i = 0; i < n; ++i) T[i] = fs.nextLong();             if (k == 0) {                Arrays.sort(S);                Arrays.sort(T);                boolean eq = Arrays.equals(S, T);                out.append(eq ? "YES\n" : "NO\n");                continue;            }             HashMap<Long, Integer> cntS = new HashMap<>();            HashMap<Long, Integer> cntT = new HashMap<>();             for (long x : S) {                long r = x % k;                if (r < 0) r += k;                long key = Math.min(r, k - r);                cntS.put(key, cntS.getOrDefault(key, 0) + 1);            }            for (long x : T) {                long r = x % k;                if (r < 0) r += k;                long key = Math.min(r, k - r);                cntT.put(key, cntT.getOrDefault(key, 0) + 1);            }             if (cntS.size() != cntT.size()) {                out.append("NO\n");            } else {                boolean ok = true;                for (Map.Entry<Long, Integer> e : cntS.entrySet()) {                    long key = e.getKey();                    int v = e.getValue();                    if (cntT.getOrDefault(key, -1) != v) {                        ok = false;                        break;                    }                }                out.append(ok ? "YES\n" : "NO\n");            }        }        System.out.print(out.toString());    }}