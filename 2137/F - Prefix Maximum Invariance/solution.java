import java.io.*;import java.util.*; public class Main {    static class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;        FastScanner(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        int nextInt() throws IOException {            int c;            while ((c = read()) <= 32) if (c == -1) return Integer.MIN_VALUE;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            int val = 0;            while (c > 32) {                val = val * 10 + (c - '0');                c = read();            }            return val * sign;        }    }     static class SegTree {        int n;        int[] tree;        SegTree(int size) {            n = 1;            while (n < size) n <<= 1;            tree = new int[n << 1];        }        void update(int pos, int val) {            int i = pos - 1 + n;            tree[i] = val;            for (i >>= 1; i > 0; i >>= 1) tree[i] = Math.max(tree[i << 1], tree[i << 1 | 1]);        }        int query(int l, int r) {            if (l > r) return 0;            int L = l - 1 + n, R = r - 1 + n;            int res = 0;            while (L <= R) {                if ((L & 1) == 1) res = Math.max(res, tree[L++]);                if ((R & 1) == 0) res = Math.max(res, tree[R--]);                L >>= 1; R >>= 1;            }            return res;        }    }     public static void main(String[] args) throws Exception {        FastScanner fs = new FastScanner(System.in);        StringBuilder sb = new StringBuilder();        int t = fs.nextInt();        for (int tc = 0; tc < t; tc++) {            int n = fs.nextInt();            int maxV = 2 * n + 5;            int[] a = new int[n + 1];            int[] b = new int[n + 1];            for (int i = 1; i <= n; i++) a[i] = fs.nextInt();            for (int i = 1; i <= n; i++) b[i] = fs.nextInt();            SegTree st = new SegTree(maxV + 2);            long ans = 0L;            for (int i = 1; i <= n; i++) {                if (a[i] == b[i]) {                    ans += 1L * i * (n - i + 1);                } else if (a[i] > b[i]) {                    int j = st.query(a[i], maxV);                    ans += 1L * j * (n - i + 1);                } else {                    int j = st.query(b[i], maxV);                    ans += 1L * j * (n - i + 1);                }                st.update(a[i], i);            }            sb.append(ans).append('\n');        }        System.out.print(sb.toString());    }}