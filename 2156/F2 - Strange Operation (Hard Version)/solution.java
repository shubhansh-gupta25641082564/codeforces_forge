import java.io.*;import java.util.*;Â public class Main {    static final int M = 998244353;        static class Fenwick {        int n, B;        int[] a;                void init(int n_) {            n = n_ + 1;            for (B = 1; B * 2 <= n; B <<= 1);            a = new int[n + 1];        }                void add(int x, int v) {            for (int i = x + 1; i <= n; i += i & -i)                a[i] += v;        }                int sum(int x) {            int ans = 0;            for (int i = x + 1; i > 0; i -= i & -i)                ans += a[i];            return ans;        }                int rS(int l, int r) {            return sum(r) - sum(l - 1);        }                int kth(int k) {            int res = 0;            for (int b = B; b > 0; b >>= 1)                if (res + b <= n && a[res + b] < k) {                    k -= a[res + b];                    res += b;                }            return res;        }    }        static class SGT {        int n, B;                static class Node {            int sc = 0, mi = M;            int[] rkm = {M, M};        }                Node[] Tr;                Node mg(Node A, Node B) {            Node C = new Node();            C.sc = A.sc ^ B.sc;            C.mi = Math.min(A.mi, B.mi);            C.rkm[0] = A.rkm[0];            C.rkm[1] = A.rkm[1];                        for (int z = 0; z < 2; z++)                if (A.mi > B.rkm[z])                    C.rkm[A.sc ^ z] = B.rkm[z];                        return C;        }                void pull(int p) {            Tr[p] = mg(Tr[p << 1], Tr[p << 1 | 1]);        }                void upd(int p) {            p += B;            Tr[p] = new Node();            for (p >>= 1; p > 0; p >>= 1)                pull(p);        }                void ini(int _n, int[] b) {            n = _n;            for (B = 1; B <= n; B <<= 1);            Tr = new Node[B << 1];                        for (int i = 0; i < Tr.length; i++)                Tr[i] = new Node();                        for (int i = 1; i <= n; i++) {                Tr[B + i].sc = 1;                Tr[B + i].mi = b[i];                Tr[B + i].rkm[0] = M;                Tr[B + i].rkm[1] = b[i];            }                        for (int i = B - 1; i > 0; i--)                pull(i);        }    }        static class S {        int n;        int[] a, b, lit, c, d;        Fenwick A;        SGT B;                void Use(int p) {            c[cSize++] = b[p];            lit[p] = 1;            A.add(p, -1);            B.upd(p);        }                int cSize = 1;                void solve() throws IOException {            n = in.nextInt();            a = new int[n + 1];            b = new int[n + 1];            lit = new int[n + 1];            c = new int[n + 1];            d = new int[n + 1];                        A = new Fenwick();            A.init(n + 1);                        for (int i = 1; i <= n; i++) {                a[i] = in.nextInt();                b[a[i]] = i;                A.add(i, 1);            }                        B = new SGT();            B.ini(n, b);                        for (int i = 1; i <= n; i++) {                int p = a[i];                if (lit[p] != 0) continue;                                if (A.sum(p) % 2 == 0)                    Use(a[B.Tr[1].rkm[1]]);                Use(p);            }                        for (int i = 1; i < cSize; i++)                d[c[i]] = i;                        for (int i = 1; i <= n; i++) {                out.print(d[i]);                if (i < n) out.print(" ");                else out.println();            }        }    }        static InputReader in;    static PrintWriter out;        public static void main(String[] args) throws IOException {        in = new InputReader(System.in);        out = new PrintWriter(System.out);                int t = in.nextInt();        while (t-- > 0) {            S SS = new S();            SS.solve();        }                out.close();    }        static class InputReader {        BufferedReader br;        StringTokenizer st;                public InputReader(InputStream stream) {            br = new BufferedReader(new InputStreamReader(stream));        }                String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }                int nextInt() throws IOException {            return Integer.parseInt(next());        }    }}