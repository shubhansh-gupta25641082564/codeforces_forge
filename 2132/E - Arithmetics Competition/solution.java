import java.io.*;import java.util.*; public class Main {    static final int BUF_SIZE = 1 << 16;    static class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[BUF_SIZE];        private int ptr = 0, len = 0;        FastScanner(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        long nextLong() throws IOException {            int c;            while ((c = read()) <= ' ') if (c == -1) return Long.MIN_VALUE;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            long val = 0;            while (c > ' ') {                val = val * 10 + (c - '0');                c = read();            }            return val * sign;        }        int nextInt() throws IOException { return (int) nextLong(); }    }     public static void main(String[] args) throws Exception {        FastScanner fs = new FastScanner(System.in);        StringBuilder out = new StringBuilder();        int t = fs.nextInt();        while (t-- > 0) {            int n = fs.nextInt();            int m = fs.nextInt();            int q = fs.nextInt();            Integer[] a = new Integer[n];            Integer[] b = new Integer[m];            for (int i = 0; i < n; ++i) a[i] = fs.nextInt();            for (int i = 0; i < m; ++i) b[i] = fs.nextInt();            Arrays.sort(a, Collections.reverseOrder());            Arrays.sort(b, Collections.reverseOrder());            long[] prefA = new long[n + 1];            long[] prefB = new long[m + 1];            for (int i = 1; i <= n; ++i) prefA[i] = prefA[i - 1] + a[i - 1];            for (int i = 1; i <= m; ++i) prefB[i] = prefB[i - 1] + b[i - 1];             // helper to get A_i (1-indexed) or 0 if out            final long[] A = new long[n + 2];            final long[] B = new long[m + 2];            for (int i = 1; i <= n; ++i) A[i] = a[i - 1];            for (int i = 1; i <= m; ++i) B[i] = b[i - 1];             for (int qi = 0; qi < q; ++qi) {                int x = fs.nextInt();                int y = fs.nextInt();                int z = fs.nextInt();                int L = Math.max(0, z - y);                int R = Math.min(z, x);                if (L > R) {                    out.append("-1\n");                    continue;                }                if (L == R) {                    int fromB = z - L;                    out.append(prefA[L] + (fromB >= 0 && fromB <= m ? prefB[fromB] : 0)).append('\n');                    continue;                }                int low = L + 1;                int high = R;                int bestIdx = -1;                while (low <= high) {                    int mid = (low + high) >>> 1;                    int idxB = z - mid + 1;                    long left = (mid >= 1 && mid <= n) ? A[mid] : 0L;                    long right = (idxB >= 1 && idxB <= m) ? B[idxB] : 0L;                    if (left > right) {                        bestIdx = mid;                        low = mid + 1;                    } else high = mid - 1;                }                long ans;                if (bestIdx == -1) {                    ans = prefA[L] + prefB[z - L];                } else {                    if (bestIdx > R) bestIdx = R;                    ans = prefA[bestIdx] + prefB[z - bestIdx];                }                out.append(ans).append('\n');            }        }        System.out.print(out.toString());    }}