import java.io.*;import java.util.*; public class Main {    static final FastScanner fs = new FastScanner(System.in);     static boolean good(long[] a, int n, long s) {        if (s % n != 0) return false;        if (n > 23) {            long v = a[0];            for (int i = 1; i < n; ++i) if (a[i] != v) return false;            return true;        } else {            for (int mod = 2; mod < n; ++mod) {                long r = a[0] % mod;                for (int j = 0; j < n; ++j) {                    if (a[j] % mod != r) return false;                }            }            return true;        }    }     public static void main(String[] args) throws Exception {        StringBuilder sb = new StringBuilder();        int T = fs.nextInt();        while (T-- > 0) {            int n = fs.nextInt();            long[] a = new long[n];            long s = 0;            for (int i = 0; i < n; ++i) { a[i] = fs.nextLong(); s += a[i]; }            Arrays.sort(a);            if (good(a, n, s)) {                sb.append(s).append('\n');                continue;            }            a[0]--;            s--;            if (good(a, n, s)) sb.append(s).append('\n');            else sb.append(-1).append('\n');        }        System.out.print(sb.toString());    }     static final class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;        FastScanner(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        int nextInt() throws IOException {            int c;            while ((c = read()) <= ' ') if (c == -1) return Integer.MIN_VALUE;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            int val = 0;            while (c > ' ') { val = val * 10 + (c - '0'); c = read(); }            return val * sign;        }        long nextLong() throws IOException {            int c;            while ((c = read()) <= ' ') if (c == -1) return Long.MIN_VALUE;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            long val = 0;            while (c > ' ') { val = val * 10 + (c - '0'); c = read(); }            return val * sign;        }    }}