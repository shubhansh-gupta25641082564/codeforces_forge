import java.io.*;import java.util.*; public class Main {    static final int MAXN = 100001;    static final long INF = (long)1e15;    static long[] g = new long[MAXN + 2];    static long[] h = new long[MAXN + 2];    static long[] karr = new long[MAXN + 2];     public static void main(String[] args) throws Exception {        FastScanner fs = new FastScanner(System.in);         g[2] = 1;        g[3] = 3;        g[4] = 5;        g[5] = 7;        g[6] = 10;        g[7] = 13;         h[2] = 0;        h[3] = 1;        h[4] = 2;        h[5] = 3;        h[6] = 5;        h[7] = 8;         karr[2] = 0;        karr[3] = 0;        karr[4] = 0;        karr[5] = 0;        karr[6] = 0;        karr[7] = 0;         for (int i = 2; i <= MAXN; i++) {            if (g[i] < g[i - 1]) {                g[i] = g[i - 1];                h[i] = h[i - 1];                karr[i] = -1;            }            for (int t = 2;; t++) {                long idx = (long) t * i + 2 * g[i] + h[i];                if (idx > MAXN) break;                long value = (4L * t - 2L) * g[i] + 2L * h[i];                int id = (int) idx;                if (g[id] < value) {                    g[id] = value;                    karr[id] = i;                    h[id] = (2L * t - 2L) * g[i] + h[i];                }            }        }         int n = fs.nextInt();        int m = fs.nextInt();        if (m != 8) m = 15300;         ArrayList<Long> a = solve(m);         if (a.size() < n) {            throw new RuntimeException("Resulting array size < n");        }         long mx = 0;        for (int i = 0; i < n; i++) {            mx = Math.min(mx, a.get(i));        }         StringBuilder sb = new StringBuilder();        for (int i = 0; i < n; i++) {            sb.append(a.get(i) - mx);            if (i + 1 < n) sb.append(' ');        }        sb.append('\n');        System.out.print(sb.toString());    }     static ArrayList<Long> solve(int m) {        if (m == 2) {            return new ArrayList<Long>(Arrays.asList(1L, 2L));        }        if (m == 3) {            return new ArrayList<Long>(Arrays.asList(1L, 2L, 4L, 1L));        }        if (m == 4) {            return new ArrayList<Long>(Arrays.asList(5L, 6L, 8L, 5L, 1L, 6L));        }        if (m == 5) {            return new ArrayList<Long>(Arrays.asList(5L, 6L, 8L, 5L, 1L, 6L, 12L, 1L));        }        if (m == 6) {            return new ArrayList<Long>(Arrays.asList(17L, 18L, 22L, 17L, 11L, 18L, 10L, 1L, 11L, 22L, 10L));        }        if (m == 7) {            return new ArrayList<Long>(Arrays.asList(1L, 2L, 6L, 1L, 7L, 15L, 6L, 16L, 27L, 15L, 2L, 16L, 1L, 27L));        }         long ki = karr[m];        if (ki == -1) {            return solve(m - 1);        }        int i = (int) ki;        long t = (m - 2L * g[i] - h[i]) / i;         ArrayList<Long> ans1 = solve(i);         for (int idx = 0; idx < ans1.size(); idx++) {            long u = ans1.get(idx);            u = u * 32L * t + 1L;            ans1.set(idx, u);        }         ArrayList<Long> ans = new ArrayList<>();        ans.add(ans1.get(0) + 8L * (t - 1L));        boolean isright = true;         for (int j = 1; j < ans1.size(); j++) {            if (ans1.get(j - 1) < ans1.get(j)) {                if (!isright) {                    int sz = ans.size();                    long step = Math.abs(ans.get(sz - 1) - ans.get(sz - 2));                    if (t > 1) {                        ans.add(ans.get(ans.size() - 1) - step - 1);                        ans.add(ans1.get(j - 1) + 8L * (t - 1L));                    }                }                long l = ans1.get(j - 1);                long r = ans1.get(j);                long li = t - 1;                long ri = 0;                long mid = (l + 8L * li + r + 8L * ri) / 2 - 2;                ans.add(mid + 1);                ans.add(r + 8L * ri);                for (int jj = 1; jj < t; jj++) {                    li--;                    ri++;                    ans.add(mid - 1);                    ans.add(l + 8L * li);                    ans.add(mid + 1);                    ans.add(r + 8L * ri);                }                isright = true;            } else {                if (isright) {                    int sz = ans.size();                    long step = Math.abs(ans.get(sz - 1) - ans.get(sz - 2));                    if (t > 1) {                        ans.add(ans.get(ans.size() - 1) + step + 1);                        ans.add(ans1.get(j - 1));                    }                }                long l = ans1.get(j);                long r = ans1.get(j - 1);                long li = t - 1;                long ri = 0;                long mid = (l + 8L * li + r + 8L * ri) / 2 + 2;                ans.add(mid - 1);                ans.add(l + 8L * li);                for (int jj = 1; jj < t; jj++) {                    li--;                    ri++;                    ans.add(mid + 1);                    ans.add(r + 8L * ri);                    ans.add(mid - 1);                    ans.add(l + 8L * li);                }                isright = false;            }        }         return ans;    }     static class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;         FastScanner(InputStream is) { in = is; }         private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }         int nextInt() throws IOException {            int c;            while ((c = read()) <= ' ') if (c == -1) return Integer.MIN_VALUE;            int sign = 1;            if (c == '-') {                sign = -1;                c = read();            }            int val = 0;            while (c > ' ') {                val = val * 10 + (c - '0');                c = read();            }            return val * sign;        }    }}