import java.io.*;import java.util.*; public class Main {    static final int MAXN = 200005;    static long INF = (long)1e18;    static int n, q;    static long[] tmin = new long[4 * MAXN];    static int[] tfr = new int[4 * MAXN];    static int[] tla = new int[4 * MAXN];    static long[] tval = new long[4 * MAXN];    static long[] lazy = new long[4 * MAXN];     static long C(long x) {        return x * (x - 1) / 2;    }     static void build(int v, int tl, int tr) {        if (tl == tr) {            tmin[v] = 0;            tfr[v] = tl;            tla[v] = tl;            tval[v] = 0;            lazy[v] = 0;            return;        }        int mid = (tl + tr) >> 1;        build(2 * v, tl, mid);        build(2 * v + 1, mid + 1, tr);        tmin[v] = 0;        tfr[v] = tl;        tla[v] = tr;        tval[v] = 0;        lazy[v] = 0;    }     static void push(int v) {        if (lazy[v] != 0) {            long add = lazy[v];            tmin[2 * v] += add;            tmin[2 * v + 1] += add;            lazy[2 * v] += add;            lazy[2 * v + 1] += add;            lazy[v] = 0;        }    }     static void update(int v, int tl, int tr, int l, int r, long x) {        if (r < tl || tr < l) return;        if (l <= tl && tr <= r) {            lazy[v] += x;            tmin[v] += x;            return;        }        push(v);        int mid = (tl + tr) >> 1;        update(2 * v, tl, mid, l, r, x);        update(2 * v + 1, mid + 1, tr, l, r, x);        if (tmin[2 * v] < tmin[2 * v + 1]) {            tmin[v] = tmin[2 * v];            tfr[v] = tfr[2 * v];            tla[v] = tla[2 * v];            tval[v] = tval[2 * v];        } else if (tmin[2 * v] > tmin[2 * v + 1]) {            tmin[v] = tmin[2 * v + 1];            tfr[v] = tfr[2 * v + 1];            tla[v] = tla[2 * v + 1];            tval[v] = tval[2 * v + 1];        } else {            tmin[v] = tmin[2 * v];            tfr[v] = tfr[2 * v];            tla[v] = tla[2 * v + 1];            tval[v] = tval[2 * v] + tval[2 * v + 1] + C((long) tfr[2 * v + 1] - (long) tla[2 * v]);        }    }     static long get(int v, int tl, int tr, int pos) {        if (tl == tr) return tmin[v];        push(v);        int mid = (tl + tr) >> 1;        if (pos <= mid) return get(2 * v, tl, mid, pos);        else return get(2 * v + 1, mid + 1, tr, pos);    }     public static void main(String[] args) throws Exception {        FastScanner fs = new FastScanner(System.in);        int t = fs.nextInt();        StringBuilder out = new StringBuilder();        while (t-- > 0) {            n = fs.nextInt();            q = fs.nextInt();            long ans = C(n);            int[] p1 = new int[n + 1];            int[] p2 = new int[n + 1];            int[] ip1 = new int[n + 1];            int[] ip2 = new int[n + 1];            for (int i = 1; i <= n; i++) {                p1[i] = fs.nextInt();                ip1[p1[i]] = i;            }            for (int i = 1; i <= n; i++) {                p2[i] = fs.nextInt();                ip2[p2[i]] = i;            }            build(1, 1, n);            int[][] segs = new int[n + 1][2];            for (int i = 1; i <= n; i++) {                int l = Math.min(p1[i], p2[i]);                int r = Math.max(p1[i], p2[i]);                segs[i][0] = l;                segs[i][1] = r;                if (l <= r - 1) update(1, 1, n, l, r - 1, 1);            }            while (q-- > 0) {                int tp = fs.nextInt();                if (tp == 1) {                    int i = fs.nextInt();                    int j = fs.nextInt();                    int pi = p1[i];                    int pj = p1[j];                    if (pi > pj) {                        int tmp = pi; pi = pj; pj = tmp;                        tmp = i; i = j; j = tmp;                    }                    update(1, 1, n, segs[i][0], segs[i][1] - 1, -1);                    update(1, 1, n, segs[j][0], segs[j][1] - 1, -1);                    int tmpIdx = ip1[pi];                    ip1[pi] = ip1[pj];                    ip1[pj] = tmpIdx;                    int tmpP = p1[i];                    p1[i] = p1[j];                    p1[j] = tmpP;                    segs[i][0] = Math.min(p1[i], p2[i]);                    segs[i][1] = Math.max(p1[i], p2[i]);                    segs[j][0] = Math.min(p1[j], p2[j]);                    segs[j][1] = Math.max(p1[j], p2[j]);                    update(1, 1, n, segs[i][0], segs[i][1] - 1, 1);                    update(1, 1, n, segs[j][0], segs[j][1] - 1, 1);                } else if (tp == 2) {                    int i = fs.nextInt();                    int j = fs.nextInt();                    int pi = p2[i];                    int pj = p2[j];                    if (pi > pj) {                        int tmp = pi; pi = pj; pj = tmp;                        tmp = i; i = j; j = tmp;                    }                    update(1, 1, n, segs[i][0], segs[i][1] - 1, -1);                    update(1, 1, n, segs[j][0], segs[j][1] - 1, -1);                    int tmpIdx = ip2[pi];                    ip2[pi] = ip2[pj];                    ip2[pj] = tmpIdx;                    int tmpP = p2[i];                    p2[i] = p2[j];                    p2[j] = tmpP;                    segs[i][0] = Math.min(p1[i], p2[i]);                    segs[i][1] = Math.max(p1[i], p2[i]);                    segs[j][0] = Math.min(p1[j], p2[j]);                    segs[j][1] = Math.max(p1[j], p2[j]);                    update(1, 1, n, segs[i][0], segs[i][1] - 1, 1);                    update(1, 1, n, segs[j][0], segs[j][1] - 1, 1);                }                long res = C(n + 1) + tval[1] + C(tfr[1]) + C(n - tla[1]);                out.append(res).append('\n');            }        }        System.out.print(out.toString());    }     static class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;        FastScanner(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        int nextInt() throws IOException {            int c;            while ((c = read()) <= ' ') if (c == -1) return Integer.MIN_VALUE;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            int val = 0;            while (c > ' ') { val = val * 10 + (c - '0'); c = read(); }            return val * sign;        }    }}