import java.io.*;import java.util.*; public class Main {    static final int MOD = 998244353;    static class FastScanner {        private final InputStream in;        private final byte[] buffer = new byte[1 << 16];        private int ptr = 0, len = 0;        FastScanner(InputStream is) { in = is; }        private int read() throws IOException {            if (ptr >= len) {                len = in.read(buffer);                ptr = 0;                if (len <= 0) return -1;            }            return buffer[ptr++];        }        int nextInt() throws IOException {            int c;            while ((c = read()) <= 32) if (c == -1) return -1;            int sign = 1;            if (c == '-') { sign = -1; c = read(); }            int val = 0;            while (c > 32) {                val = val * 10 + (c - '0');                c = read();            }            return val * sign;        }        String next() throws IOException {            StringBuilder sb = new StringBuilder();            int c;            while ((c = read()) <= 32) if (c == -1) return null;            while (c > 32) {                sb.append((char)c);                c = read();            }            return sb.toString();        }    }     static class BIT {        final int n;        final long[] bit;        BIT(int n) { this.n = n; bit = new long[n + 1]; }        void add(int idx, long val) {            while (idx <= n) {                bit[idx] += val;                if (bit[idx] >= MOD) bit[idx] -= MOD;                idx += idx & -idx;            }        }        long sum(int idx) {            long r = 0;            while (idx > 0) {                r += bit[idx];                if (r >= MOD) r -= MOD;                idx -= idx & -idx;            }            return r;        }        long rangeSum(int l, int r) {            if (r < l) return 0;            long res = sum(r) - sum(l - 1);            if (res < 0) res += MOD;            return res;        }    }     public static void main(String[] args) throws Exception {        FastScanner fs = new FastScanner(System.in);        StringBuilder out = new StringBuilder();        int T = fs.nextInt();        while (T-- > 0) {            String s = fs.next();            int n = s.length();            int q = fs.nextInt();            int[] queries = new int[q];            for (int i = 0; i < q; ++i) queries[i] = fs.nextInt();             long[] pow2 = new long[n + 1];            pow2[0] = 1;            for (int i = 1; i <= n; ++i) pow2[i] = (pow2[i - 1] << 1) % MOD;             BIT bitPow0 = new BIT(n), bitPow1 = new BIT(n);            BIT bitRev0 = new BIT(n), bitRev1 = new BIT(n);            int[] arr = new int[n + 1];            for (int i = 1; i <= n; ++i) {                arr[i] = s.charAt(i - 1) - '0';                long valPow = pow2[i - 1];                long valRev = pow2[n - i];                if (arr[i] == 0) {                    bitPow0.add(i, valPow);                    bitRev0.add(i, valRev);                } else {                    bitPow1.add(i, valPow);                    bitRev1.add(i, valRev);                }            }             long Ttrans = 0;            long[] pref0 = new long[n + 1], pref1 = new long[n + 1];            for (int i = 1; i <= n; ++i) {                pref0[i] = pref0[i - 1];                pref1[i] = pref1[i - 1];                if (arr[i] == 0) pref0[i] = (pref0[i] + pow2[i - 1]) % MOD;                else pref1[i] = (pref1[i] + pow2[i - 1]) % MOD;            }            for (int j = 1; j <= n; ++j) {                int c = arr[j];                long differentLeft = (c == 0) ? pref1[j - 1] : pref0[j - 1];                long contrib = differentLeft * pow2[n - j] % MOD;                Ttrans += contrib;                if (Ttrans >= MOD) Ttrans -= MOD;            }             long twoN = pow2[n];            for (int idx = 0; idx < q; ++idx) {                int p = queries[idx];                int old = arr[p];                int other = 1 - old;                long leftOld = (other == 0) ? bitPow0.sum(p - 1) : bitPow1.sum(p - 1);                long leftNew = (old == 0) ? bitPow0.sum(p - 1) : bitPow1.sum(p - 1);                long factorLeft = pow2[n - p];                long deltaLeft = (leftNew - leftOld) % MOD;                if (deltaLeft < 0) deltaLeft += MOD;                deltaLeft = deltaLeft * factorLeft % MOD;                 long rightOld = (other == 0) ? bitRev0.rangeSum(p + 1, n) : bitRev1.rangeSum(p + 1, n);                long rightNew = (old == 0) ? bitRev0.rangeSum(p + 1, n) : bitRev1.rangeSum(p + 1, n);                long factorRight = pow2[p - 1];                long deltaRight = (rightNew - rightOld) % MOD;                if (deltaRight < 0) deltaRight += MOD;                deltaRight = deltaRight * factorRight % MOD;                 long delta = deltaLeft + deltaRight;                if (delta >= MOD) delta -= MOD;                Ttrans += delta;                Ttrans %= MOD;                 long valPow = pow2[p - 1];                long valRev = pow2[n - p];                if (old == 0) {                    bitPow0.add(p, (MOD - valPow) % MOD);                    bitRev0.add(p, (MOD - valRev) % MOD);                    bitPow1.add(p, valPow);                    bitRev1.add(p, valRev);                } else {                    bitPow1.add(p, (MOD - valPow) % MOD);                    bitRev1.add(p, (MOD - valRev) % MOD);                    bitPow0.add(p, valPow);                    bitRev0.add(p, valRev);                }                arr[p] = other;                 long ans = (twoN - 1 + Ttrans) % MOD;                if (ans < 0) ans += MOD;                out.append(ans);                if (idx + 1 < q) out.append(' ');            }            out.append('\n');        }        System.out.print(out.toString());    }}